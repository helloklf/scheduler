
joyose_db='/data/data/com.xiaomi.joyose/databases/SmartP.db'
joyose_dfps_clear() {
  params='{"header":{"version":"2022121231","network_improve":true,"index_enable":true,"mqs_enable":true},"game_booster":{"booster_enable":false,"cpuset_enable":false,"tuner_enable":false,"monitor":{"monitor_enable":false,"analytics_enable":false,"default_interval":2},"support_motor_app":[],"support_display_refresh_rates":[60,90,120],"support_dynamic_refresh_rate_games":[],"support_highfps_app":[],"scale_app_enable":false,"support_scale_app_list":[],"support_gdpvo_app":[],"support_gt_app":[],"dynamic_fps_global":{"dynamic_fps":"10:120,30:120,35:120,38:120,50:90,52:60","dynamic_fps_M":"10:120,35:120,50:90,52:60"},"migt":[],"booster_config":{"default_config":[],"scene_config":[],"ovrride_config":[]}}}'
  sqlite3 $joyose_db "update cloud_config set params = '$params' where config_name = 'booster_config'"
}
mi_joyose_opt() {
  joyose_opt_ok=0
  if [[ ! -f $joyose_db ]]; then
    # echo 'Joyose Uninstalled!' 1>&2
    joyose_opt_ok=0
  elif [[ $(type sqlite3 | grep  "/sqlite3") == "" ]];then
    if [[ -d "$TOOLKIT" ]];then
      wget -O "$TOOLKIT/sqlite3" https://vtools.oss-cn-beijing.aliyuncs.com/addin/sqlite3 2>/dev/null
      s=`du -k "$TOOLKIT/sqlite3"|awk '{print $1}'`
      if [[ "$s" -gt 256 ]]; then
        chmod 777 "$TOOLKIT/sqlite3" 2>/dev/null
        joyose_opt_ok=1
      else
        rm "$TOOLKIT/sqlite3" 2>/dev/null
        # echo 'Download failed!' 1>&2
        joyose_opt_ok=2
      fi
    else
      # echo 'Sqlite3 binary is required!' 1>&2
      joyose_opt_ok=3
    fi
  else
    joyose_opt_ok=1
  fi
  # echo $joyose_opt_ok > /cache/joyose_opt_ok.log
  if [[ "$joyose_opt_ok" == 1 ]];then
    joyose_dfps_clear
  else
    echo 'Skip ...' $joyose_opt_ok
  fi
  # rm /data/system/mcd/*
  if [[ -e /data/system/mcd ]]; then
    if [[ -f /data/system/mcd/migl ]]; then
      chmod 666 /data/system/mcd/migl
    fi
    echo -n '' > /data/system/mcd/migl
    echo 'yuanshen 1600 720 -1' >> /data/system/mcd/migl
    echo 'pubg -1 -1 -1' >> /data/system/mcd/migl
    chmod 444 /data/system/mcd/migl
    if [[ -e /data/system/mcd/df ]]; then
      chattr -i /data/system/mcd/df
      rm /data/system/mcd/df
      echo '' > /data/system/mcd/df
      chattr +i /data/system/mcd/df
    fi
  fi
  if [[ -e /data/system/migt/migt ]]; then
    rm -rf /data/system/migt/migt
  fi
  echo 0 > /sys/module/mtk_fpsgo/parameters/max_freq_limit_level
  echo 0 > /sys/module/mtk_fpsgo/parameters/min_freq_limit_level
  echo 10 > /sys/module/mtk_fpsgo/parameters/variance
}



uninstall_mi_opt() {
  # if [[ $(pm list packages --user 0 com.miui.daemon) != "" ]] || [[ $(pm list packages --user 0 com.xiaomi.joyose) != "" ]]; then
  #   clear_app_data com.miui.powerkeeper
  #   clear_app_data com.xiaomi.powerchecker
  # fi
  # pm uninstall --user 0 -k com.miui.daemon >/dev/null 2>&1
  # pm uninstall --user 0 -k com.xiaomi.joyose >/dev/null 2>&1
  pm uninstall --user 0 com.miui.daemon >/dev/null 2>&1
  pm uninstall --user 0 com.xiaomi.joyose >/dev/null 2>&1
}

reinstall_mi_opt() {
  uninstall_mi_opt
  pm install-existing --user 0 com.miui.daemon >/dev/null 2>&1
  pm install-existing --user 0 com.xiaomi.joyose >/dev/null 2>&1
}

# Disable MIUI's daemon\joyose
# disable_mi_opt &

# Uninstall MIUI's daemon\joyose
varsion=$(getprop ro.miui.ui.version.name)
if [[ "$varsion" == "V130" ]]; then
  mi_joyose_opt &
  # echo 'mi_joyose_opt'
  uninstall_mi_opt &
elif [[ "$varsion" == "V12" ]]; then
  uninstall_mi_opt &
elif [[ "$varsion" == "V125" ]]; then
  # uninstall_mi_opt &
  echo 'uninstall_mi_opt'
fi

# Reinstall MIUI's daemon\joyose
# reinstall_mi_opt &